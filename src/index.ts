import { app, BrowserWindow, dialog, ipcMain } from "electron";
import fs from "node:fs/promises";
import { exec } from "node:child_process";
import path from "node:path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  ipcMain.on("open-file-dialog", async (event) => {
    const cwd = process.env.GFPGAN_DIR;
    const { filePaths } = await dialog.showOpenDialog({
      properties: ["openFile"],
    });

    const filePath = filePaths[0];

    const inputFile = await fs.readFile(filePath);
    event.reply("displayInput", inputFile.toString("base64"));

    const fileName = path.basename(filePath);
    const outputPath = `${cwd}/results/restored_imgs/${fileName}`;

    try {
      await fs.access(outputPath);
    } catch (_) {
      const promise = new Promise<void>((resolve, reject) => {
        exec(
          `python3 inference_gfpgan.py --bg_upsampler realesrgan -i '${filePath}' -o results -v 1.3 -s 2`,
          { cwd },
          (error, stdout, stderr) => {
            if (error) {
              console.error(error);
              reject(error);
              return;
            }

            console.log(`stdout: ${stdout}`);
            console.error(`stderr: ${stderr}`);
            resolve();
          }
        );
      });

      await promise;
    }

    const outputFile = await fs.readFile(outputPath);
    event.reply("displayOutput", outputFile.toString("base64"));
  });

  ipcMain.on("open-save-dialog", async (_, image: string) => {
    try {
      const { filePath } = await dialog.showSaveDialog({});

      await fs.writeFile(`${filePath}.jpg`, image, "base64");
    } catch (e) {
      console.error(`Error downloading file: ${e}`);
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
